import { PUMP_PRESSURE_GAIN } from '../types';
import { setTargetBedHeight } from './canvas';
import { secantMethod } from './helpers';
import State from './state';

const InitialBedHeight = 10.5; // cm
const mu = 1.002; // mPa s
const rho = .998; // g / cc
const rho_p = 2.4; // g / cc
const grav = 981; // cm / s2
const ParticleDiameter = .1; // cm
const Init_VoidFrac = 0.35;

/**
 * Calculate the pressure generated by the pump
 * @returns pressure from pump in cm water
 */
export function pumpPressure() {
    return PUMP_PRESSURE_GAIN * State.valveLift;
}

/**
 * Calculates the pressure drop and sets the bed height
 * @returns pressure drop across bed in UNITS (positive)
 */
export function pressureDrop(lift?: number) {
    var dbMode = true;
    if (lift == undefined) {
        lift = State.valveLift;
        dbMode = false;
    }
    const sup_vel = lift * 6.5; // Superficial velocity, cm/s
    // console.log(`Superficial Velocity: ${sup_vel}`);

    // Packed regime
    if (sup_vel <= 1) {
        // Bed height is fixed
        if (!dbMode) setTargetBedHeight(InitialBedHeight);
        
        // Use eq 1 to solve pressure
        const p = 150 * mu * InitialBedHeight / ParticleDiameter**2 * (1 - Init_VoidFrac)**2 / Init_VoidFrac**3 * sup_vel / 1000 +
            1.75 * InitialBedHeight * rho / ParticleDiameter  *  (1 - Init_VoidFrac) / Init_VoidFrac**3 * sup_vel**2; // mPa
        const p_cmw = p / rho / grav;

        // console.log(`Packed bed regime; Pressure drop = ${p} mPa = ${p_cmw} cm water`);
        return p_cmw;
    }

    // Fluidized regime
    else if (sup_vel <= 6) {
        const ergun = (lf: number) => {
            // Calculate porosity
            const ep = 1 - InitialBedHeight / lf * (1 - Init_VoidFrac);
            // Solve eq 3 for root
            return 1.75 * rho * ParticleDiameter * sup_vel**2 +
                1.5 * mu * (1 - ep) * sup_vel -
                (rho_p - rho) * grav * ep**3 * ParticleDiameter**2;
        };

        const h = secantMethod(ergun, 1, 10);
        // console.log(`Fluidized Regime; Bed height = ${h}`);
        if (!dbMode) setTargetBedHeight(h);

        return 4.3;
    }

    // Repacked regime
    else {
        const dx = sup_vel - 6;
        const dy = dx * 4.0;
        // console.log('Repacked regime');
        if (!dbMode) setTargetBedHeight(30);
        return 4.3 + dy; 
    }
}

/** */
export function catchAndWeigh() {

}