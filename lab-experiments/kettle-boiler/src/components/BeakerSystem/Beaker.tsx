import { createEffect, createSignal, onMount, type Accessor, type Component, type Setter } from "solid-js";
import "./Beaker.css"
import { constrain, getSVGCoords } from "../../ts/helpers";
import { Portal } from "solid-js/web";
import { createMemo } from "solid-js";

type SignalT = [get: Accessor<number>, set: Setter<number>];

// Struct to keep the state for the beaker
export type RectState = {
  idx: number;
  x: number;
  y: number;
  value: number;
  blocking: number | null; // stacking order
};

interface BeakerProps {
  idx: number;
  initialX: number;
  initialY: number;
  value: number;
  blocking: number | null;
  update: (idx: number, patch: Partial<RectState>) => void;
  block: (which: number, value: SignalT | null) => void;
  isBlocked: () => Array<SignalT | null>;
  valueSignal?: SignalT;
};

const minY = 550;

export const Beaker: Component<BeakerProps> = (props) => {
  // local position signals to make dragging snappy
  const [x, setX] = createSignal(props.initialX);
  const [y, setY] = createSignal(props.initialY);
  const [modalDisplay, setModalDisplay] = createSignal(false);
  const [overflow, setOverflow] = createSignal(false);
  // If a stable valueSignal was provided by the parent, use it. Otherwise create a local one.
  const local = props.valueSignal ?? createSignal(props.value);
  const [val, setVal] = local;

  let [blocked, setBlocked] = createSignal<number | null> (props.blocking);

  // Anytime the volume is set, check if it was overflowed
  let overflowTimer: number | null = null;
  createEffect(() => {
    if (val() > 1150 && blocked() !== null) {
      // Overflowing
      setOverflow(true);
      setVal(1150);
    }
    else if (overflow()) {
      // Set/reset a timer to cancel the overflowing
      if (overflowTimer !== null) clearTimeout(overflowTimer);
      overflowTimer = setTimeout(() => { setOverflow(false); overflowTimer = null; }, 1000);
    }
  });

  // Coordinate logic wrapper so we can place on scale, etc
  const setCoords = (x: number, y: number) => {
    // Ensure the beaker is always on the table
    x = constrain(x, 0, 1043);
    y = constrain(y, minY, 655);
    const b = blocked();

    // Left drain
    if (x > 30 && x < 200 && y < 610) {
        // If left drain is blocked, do nothing
        if (props.isBlocked()[0] !== null) return;

        // Set position
        x = 112;
        y = 576;
        // Set blocking
        setBlocked(0);
        props.block(0, [val, setVal]);
    }
    // Scale
    else if (x > 443 && x < 713) {
      // See if something is on the first beaker slot
      if ((props.isBlocked()[1] === null && b !== 2) || b === 1) {
        // Set position
        x = 568;
        y = 540;
        // Set blocking
        if (b !== 1) setBlocked(1);
        props.block(1, [val, setVal]);
      }
      // First slot is blocked; second must be full
      else {
        // Set position
        x = 598;
        y = 555;
        // Set blocking
        setBlocked(2);
        props.block(2, [val, setVal]);
      }
    }
    // Right drain
    else if (x > 840 && x < 1010 && y < 610) {
        // If right drain is blocked, do 
        if (props.isBlocked()[3] !== null) return;

        // Set position
        x = 922;
        y = 576;
        // Set blocking
        setBlocked(3);
        props.block(3, [val, setVal]);
    }
    // None
    else if (b !== null) {
      console.log(`Unblocking trigger`)
      props.block(b, null);
      setBlocked(null);
    }

    // Update the x and y coordinates
    setX(x);
    setY(y);
  }

  // Drag events
  const start = (e: MouseEvent) => {
    e.preventDefault();
    const coords = getSVGCoords(e);
    let mozX = x() - coords.x;
    let mozY = y() - coords.y;
    
    const onMove = (ev: MouseEvent) => {
      const coords = getSVGCoords(ev);
      const dx = coords.x - x();
      const dy = coords.y - y();

      const newX = x() + dx + mozX;
      const newY = y() + dy + mozY;
      setCoords(newX, newY);
      props.update(props.idx, { x: x(), y: y(), blocking: blocked() });
    };

    const end = () => {
      // Remove event listeners
      window.removeEventListener("pointermove", onMove);
      window.removeEventListener("pointerup", end);
      if (blocked() === null) setModalDisplay(true);
    };

    window.addEventListener("pointermove", onMove);
    window.addEventListener("pointerup", end);
  };

  onMount(() => {
    setCoords(props.initialX, props.initialY);
  });

  let ref!: SVGGElement;

  return (<>
    <g class="beaker drag-exempt-slippery" transform={`translate(${x()}, ${y()})`} onPointerDown={start}>
      <BeakerFill vol={val} />
      <g id="beakerBody" ref={ref}>
      <g id="Rectangle 3">
      <mask id="path-2-inside-1_4_7" fill="white">
      <path d="M1 2H88V116C88 119.314 85.3137 122 82 122H7C3.68629 122 1 119.314 1 116V2Z"/>
      </mask>
      <path d="M1 2H88H1ZM92 116C92 121.523 87.5229 126 82 126H7C1.47715 126 -3 121.523 -3 116H5C5 117.105 5.89543 118 7 118H82C83.1046 118 84 117.105 84 116H92ZM7 126C1.47715 126 -3 121.523 -3 116V2H5V116C5 117.105 5.89543 118 7 118V126ZM92 2V116C92 121.523 87.5229 126 82 126V118C83.1046 118 84 117.105 84 116V2H92Z" fill="#D5D5D5" mask="url(#path-2-inside-1_4_7)"/>
      </g>
      <path id="Rectangle 1" d="M87.5 2.5V116C87.5 119.038 85.0376 121.5 82 121.5H7C3.96243 121.5 1.5 119.038 1.5 116V2.5H87.5Z" fill="url(#paint0_linear_4_7)" fill-opacity="0.2" stroke="black"/>
      <rect id="Rectangle 2" x="0.5" y="0.5" width="89" height="3" rx="1.5" fill="#D5D5D5" stroke="black"/>
      </g>
      <g id="ticks">
      <path d="M44.9858 15.6364V20H44.4574V16.1903H44.4318L43.3665 16.8977V16.3608L44.4574 15.6364H44.9858Z" fill="black"/>
      <path d="M47.6641 20.0597C47.343 20.0597 47.0696 19.9723 46.8438 19.7976C46.6179 19.6215 46.4453 19.3665 46.326 19.0327C46.2067 18.6974 46.147 18.2926 46.147 17.8182C46.147 17.3466 46.2067 16.9439 46.326 16.6101C46.4467 16.2749 46.62 16.0192 46.8459 15.843C47.0732 15.6655 47.3459 15.5767 47.6641 15.5767C47.9822 15.5767 48.2543 15.6655 48.4801 15.843C48.7074 16.0192 48.8807 16.2749 49 16.6101C49.1207 16.9439 49.1811 17.3466 49.1811 17.8182C49.1811 18.2926 49.1214 18.6974 49.0021 19.0327C48.8828 19.3665 48.7102 19.6215 48.4844 19.7976C48.2585 19.9723 47.9851 20.0597 47.6641 20.0597ZM47.6641 19.5909C47.9822 19.5909 48.2294 19.4375 48.4055 19.1307C48.5817 18.8239 48.6697 18.3864 48.6697 17.8182C48.6697 17.4403 48.6293 17.1186 48.5483 16.853C48.4688 16.5874 48.3537 16.3849 48.2031 16.2457C48.054 16.1065 47.8743 16.0369 47.6641 16.0369C47.3487 16.0369 47.1023 16.1925 46.9247 16.5036C46.7472 16.8132 46.6584 17.2514 46.6584 17.8182C46.6584 18.196 46.6982 18.517 46.7777 18.7813C46.8572 19.0455 46.9716 19.2465 47.1207 19.3842C47.2713 19.522 47.4524 19.5909 47.6641 19.5909Z" fill="black"/>
      <path d="M51.4141 20.0597C51.093 20.0597 50.8196 19.9723 50.5938 19.7976C50.3679 19.6215 50.1953 19.3665 50.076 19.0327C49.9567 18.6974 49.897 18.2926 49.897 17.8182C49.897 17.3466 49.9567 16.9439 50.076 16.6101C50.1967 16.2749 50.37 16.0192 50.5959 15.843C50.8232 15.6655 51.0959 15.5767 51.4141 15.5767C51.7322 15.5767 52.0043 15.6655 52.2301 15.843C52.4574 16.0192 52.6307 16.2749 52.75 16.6101C52.8707 16.9439 52.9311 17.3466 52.9311 17.8182C52.9311 18.2926 52.8714 18.6974 52.7521 19.0327C52.6328 19.3665 52.4602 19.6215 52.2344 19.7976C52.0085 19.9723 51.7351 20.0597 51.4141 20.0597ZM51.4141 19.5909C51.7322 19.5909 51.9794 19.4375 52.1555 19.1307C52.3317 18.8239 52.4197 18.3864 52.4197 17.8182C52.4197 17.4403 52.3793 17.1186 52.2983 16.853C52.2188 16.5874 52.1037 16.3849 51.9531 16.2457C51.804 16.1065 51.6243 16.0369 51.4141 16.0369C51.0987 16.0369 50.8523 16.1925 50.6747 16.5036C50.4972 16.8132 50.4084 17.2514 50.4084 17.8182C50.4084 18.196 50.4482 18.517 50.5277 18.7813C50.6072 19.0455 50.7216 19.2465 50.8707 19.3842C51.0213 19.522 51.2024 19.5909 51.4141 19.5909Z" fill="black"/>
      <path d="M55.1641 20.0597C54.843 20.0597 54.5696 19.9723 54.3438 19.7976C54.1179 19.6215 53.9453 19.3665 53.826 19.0327C53.7067 18.6974 53.647 18.2926 53.647 17.8182C53.647 17.3466 53.7067 16.9439 53.826 16.6101C53.9467 16.2749 54.12 16.0192 54.3459 15.843C54.5732 15.6655 54.8459 15.5767 55.1641 15.5767C55.4822 15.5767 55.7543 15.6655 55.9801 15.843C56.2074 16.0192 56.3807 16.2749 56.5 16.6101C56.6207 16.9439 56.6811 17.3466 56.6811 17.8182C56.6811 18.2926 56.6214 18.6974 56.5021 19.0327C56.3828 19.3665 56.2102 19.6215 55.9844 19.7976C55.7585 19.9723 55.4851 20.0597 55.1641 20.0597ZM55.1641 19.5909C55.4822 19.5909 55.7294 19.4375 55.9055 19.1307C56.0817 18.8239 56.1697 18.3864 56.1697 17.8182C56.1697 17.4403 56.1293 17.1186 56.0483 16.853C55.9688 16.5874 55.8537 16.3849 55.7031 16.2457C55.554 16.1065 55.3743 16.0369 55.1641 16.0369C54.8487 16.0369 54.6023 16.1925 54.4247 16.5036C54.2472 16.8132 54.1584 17.2514 54.1584 17.8182C54.1584 18.196 54.1982 18.517 54.2777 18.7813C54.3572 19.0455 54.4716 19.2465 54.6207 19.3842C54.7713 19.522 54.9524 19.5909 55.1641 19.5909Z" fill="black"/>
      <path d="M59.1868 20V16.7273H59.6726V17.2386H59.7152C59.7834 17.0639 59.8935 16.9283 60.0455 16.8317C60.1974 16.7337 60.38 16.6847 60.593 16.6847C60.8089 16.6847 60.9886 16.7337 61.1321 16.8317C61.277 16.9283 61.3899 17.0639 61.4709 17.2386H61.505C61.5888 17.0696 61.7145 16.9354 61.8821 16.8359C62.0497 16.7351 62.2507 16.6847 62.4851 16.6847C62.7777 16.6847 63.017 16.7763 63.2031 16.9595C63.3892 17.1413 63.4822 17.4247 63.4822 17.8097V20H62.9794V17.8097C62.9794 17.5682 62.9134 17.3956 62.7812 17.2919C62.6491 17.1882 62.4936 17.1364 62.3146 17.1364C62.0845 17.1364 61.9063 17.206 61.7798 17.3452C61.6534 17.483 61.5902 17.6577 61.5902 17.8693V20H61.0788V17.7585C61.0788 17.5724 61.0185 17.4226 60.8977 17.309C60.777 17.1939 60.6214 17.1364 60.4311 17.1364C60.3004 17.1364 60.1783 17.1712 60.0646 17.2408C59.9524 17.3104 59.8615 17.407 59.7919 17.5305C59.7237 17.6527 59.6896 17.794 59.6896 17.9545V20H59.1868Z" fill="black"/>
      <path d="M64.4698 20V15.6364H64.9982V19.5313H67.0266V20H64.4698Z" fill="black"/>
      <path d="M46.8494 40.0597C46.5568 40.0597 46.2983 40.0078 46.0739 39.9041C45.8509 39.799 45.6768 39.6548 45.5518 39.4716C45.4268 39.2869 45.3651 39.0767 45.3665 38.8409C45.3651 38.6563 45.4013 38.4858 45.4751 38.3295C45.549 38.1719 45.6499 38.0405 45.7777 37.9354C45.907 37.8288 46.0511 37.7614 46.2102 37.733V37.7074C46.0014 37.6534 45.8352 37.5362 45.7116 37.3558C45.5881 37.174 45.527 36.9673 45.5284 36.7358C45.527 36.5142 45.5831 36.3161 45.6967 36.1413C45.8104 35.9666 45.9666 35.8288 46.1655 35.728C46.3658 35.6271 46.5938 35.5767 46.8494 35.5767C47.1023 35.5767 47.3281 35.6271 47.527 35.728C47.7259 35.8288 47.8821 35.9666 47.9957 36.1413C48.1108 36.3161 48.169 36.5142 48.1705 36.7358C48.169 36.9673 48.1058 37.174 47.9808 37.3558C47.8572 37.5362 47.6932 37.6534 47.4886 37.7074V37.733C47.6463 37.7614 47.7884 37.8288 47.9148 37.9354C48.0412 38.0405 48.142 38.1719 48.2173 38.3295C48.2926 38.4858 48.331 38.6563 48.3324 38.8409C48.331 39.0767 48.267 39.2869 48.1406 39.4716C48.0156 39.6548 47.8416 39.799 47.6186 39.9041C47.397 40.0078 47.1406 40.0597 46.8494 40.0597ZM46.8494 39.5909C47.0469 39.5909 47.2173 39.5589 47.3608 39.495C47.5043 39.4311 47.6151 39.3409 47.6932 39.2244C47.7713 39.108 47.8111 38.9716 47.8125 38.8153C47.8111 38.6506 47.7685 38.505 47.6847 38.3786C47.6009 38.2521 47.4865 38.1527 47.3416 38.0803C47.1982 38.0078 47.0341 37.9716 46.8494 37.9716C46.6634 37.9716 46.4972 38.0078 46.3509 38.0803C46.206 38.1527 46.0916 38.2521 46.0078 38.3786C45.9254 38.505 45.8849 38.6506 45.8864 38.8153C45.8849 38.9716 45.9226 39.108 45.9993 39.2244C46.0774 39.3409 46.1889 39.4311 46.3338 39.495C46.4787 39.5589 46.6506 39.5909 46.8494 39.5909ZM46.8494 37.5199C47.0057 37.5199 47.1442 37.4886 47.2649 37.4261C47.3871 37.3636 47.483 37.2763 47.5526 37.1641C47.6222 37.0518 47.6577 36.9205 47.6591 36.7699C47.6577 36.6222 47.6229 36.4936 47.5547 36.3842C47.4865 36.2734 47.392 36.1882 47.2713 36.1286C47.1506 36.0675 47.0099 36.0369 46.8494 36.0369C46.6861 36.0369 46.5433 36.0675 46.4212 36.1286C46.299 36.1882 46.2045 36.2734 46.1378 36.3842C46.071 36.4936 46.0384 36.6222 46.0398 36.7699C46.0384 36.9205 46.0717 37.0518 46.1399 37.1641C46.2095 37.2763 46.3054 37.3636 46.4276 37.4261C46.5497 37.4886 46.6903 37.5199 46.8494 37.5199Z" fill="black"/>
      <path d="M50.5723 40.0597C50.2512 40.0597 49.9778 39.9723 49.752 39.7976C49.5261 39.6215 49.3535 39.3665 49.2342 39.0327C49.1149 38.6974 49.0552 38.2926 49.0552 37.8182C49.0552 37.3466 49.1149 36.9439 49.2342 36.6101C49.3549 36.2749 49.5282 36.0192 49.7541 35.843C49.9814 35.6655 50.2541 35.5767 50.5723 35.5767C50.8904 35.5767 51.1625 35.6655 51.3883 35.843C51.6156 36.0192 51.7889 36.2749 51.9082 36.6101C52.0289 36.9439 52.0893 37.3466 52.0893 37.8182C52.0893 38.2926 52.0297 38.6974 51.9103 39.0327C51.791 39.3665 51.6184 39.6215 51.3926 39.7976C51.1667 39.9723 50.8933 40.0597 50.5723 40.0597ZM50.5723 39.5909C50.8904 39.5909 51.1376 39.4375 51.3137 39.1307C51.4899 38.8239 51.5779 38.3864 51.5779 37.8182C51.5779 37.4403 51.5375 37.1186 51.4565 36.853C51.377 36.5874 51.2619 36.3849 51.1113 36.2457C50.9622 36.1065 50.7825 36.0369 50.5723 36.0369C50.2569 36.0369 50.0105 36.1925 49.8329 36.5036C49.6554 36.8132 49.5666 37.2514 49.5666 37.8182C49.5666 38.196 49.6064 38.517 49.6859 38.7813C49.7654 39.0455 49.8798 39.2465 50.0289 39.3842C50.1795 39.522 50.3606 39.5909 50.5723 39.5909Z" fill="black"/>
      <path d="M54.3223 40.0597C54.0012 40.0597 53.7278 39.9723 53.502 39.7976C53.2761 39.6215 53.1035 39.3665 52.9842 39.0327C52.8649 38.6974 52.8052 38.2926 52.8052 37.8182C52.8052 37.3466 52.8649 36.9439 52.9842 36.6101C53.1049 36.2749 53.2782 36.0192 53.5041 35.843C53.7314 35.6655 54.0041 35.5767 54.3223 35.5767C54.6404 35.5767 54.9125 35.6655 55.1383 35.843C55.3656 36.0192 55.5389 36.2749 55.6582 36.6101C55.7789 36.9439 55.8393 37.3466 55.8393 37.8182C55.8393 38.2926 55.7797 38.6974 55.6603 39.0327C55.541 39.3665 55.3684 39.6215 55.1426 39.7976C54.9167 39.9723 54.6433 40.0597 54.3223 40.0597ZM54.3223 39.5909C54.6404 39.5909 54.8876 39.4375 55.0637 39.1307C55.2399 38.8239 55.3279 38.3864 55.3279 37.8182C55.3279 37.4403 55.2875 37.1186 55.2065 36.853C55.127 36.5874 55.0119 36.3849 54.8613 36.2457C54.7122 36.1065 54.5325 36.0369 54.3223 36.0369C54.0069 36.0369 53.7605 36.1925 53.5829 36.5036C53.4054 36.8132 53.3166 37.2514 53.3166 37.8182C53.3166 38.196 53.3564 38.517 53.4359 38.7813C53.5154 39.0455 53.6298 39.2465 53.7789 39.3842C53.9295 39.522 54.1106 39.5909 54.3223 39.5909Z" fill="black"/>
      <path d="M46.9006 60.0597C46.7216 60.0568 46.5426 60.0227 46.3636 59.9574C46.1847 59.892 46.0213 59.782 45.8736 59.6271C45.7259 59.4709 45.6072 59.2599 45.5178 58.9943C45.4283 58.7273 45.3835 58.392 45.3835 57.9886C45.3835 57.6023 45.4197 57.2599 45.4922 56.9617C45.5646 56.6619 45.6697 56.4098 45.8075 56.2053C45.9453 55.9993 46.1115 55.843 46.3061 55.7365C46.5021 55.63 46.723 55.5767 46.9688 55.5767C47.2131 55.5767 47.4304 55.6257 47.6207 55.7237C47.8125 55.8203 47.9688 55.9553 48.0895 56.1286C48.2102 56.3018 48.2884 56.5014 48.3239 56.7273H47.804C47.7557 56.5313 47.6619 56.3686 47.5227 56.2393C47.3835 56.1101 47.1989 56.0455 46.9688 56.0455C46.6307 56.0455 46.3643 56.1925 46.1697 56.4865C45.9766 56.7805 45.8793 57.1932 45.8778 57.7244H45.9119C45.9915 57.6037 46.0859 57.5007 46.1953 57.4155C46.3061 57.3288 46.4283 57.2621 46.5618 57.2152C46.6953 57.1683 46.8366 57.1449 46.9858 57.1449C47.2358 57.1449 47.4645 57.2074 47.6719 57.3324C47.8793 57.456 48.0455 57.6271 48.1705 57.8459C48.2955 58.0632 48.358 58.3125 48.358 58.5938C48.358 58.8636 48.2976 59.1108 48.1768 59.3352C48.0561 59.5582 47.8864 59.7358 47.6676 59.8679C47.4503 59.9986 47.1946 60.0625 46.9006 60.0597ZM46.9006 59.5909C47.0795 59.5909 47.2401 59.5462 47.3821 59.4567C47.5256 59.3672 47.6385 59.2472 47.7209 59.0966C47.8047 58.946 47.8466 58.7784 47.8466 58.5938C47.8466 58.4134 47.8061 58.2493 47.7251 58.1016C47.6456 57.9524 47.5355 57.8338 47.3949 57.7457C47.2557 57.6577 47.0966 57.6136 46.9176 57.6136C46.7827 57.6136 46.657 57.6406 46.5405 57.6946C46.424 57.7472 46.3217 57.8196 46.2337 57.9119C46.147 58.0043 46.0788 58.1101 46.0291 58.2294C45.9794 58.3473 45.9545 58.4716 45.9545 58.6023C45.9545 58.7756 45.995 58.9375 46.076 59.0881C46.1584 59.2386 46.2706 59.3601 46.4126 59.4524C46.5561 59.5447 46.7188 59.5909 46.9006 59.5909Z" fill="black"/>
      <path d="M50.6191 60.0597C50.2981 60.0597 50.0247 59.9723 49.7988 59.7976C49.573 59.6215 49.4004 59.3665 49.2811 59.0327C49.1618 58.6974 49.1021 58.2926 49.1021 57.8182C49.1021 57.3466 49.1618 56.9439 49.2811 56.6101C49.4018 56.2749 49.5751 56.0192 49.801 55.843C50.0282 55.6655 50.301 55.5767 50.6191 55.5767C50.9373 55.5767 51.2093 55.6655 51.4352 55.843C51.6625 56.0192 51.8358 56.2749 51.9551 56.6101C52.0758 56.9439 52.1362 57.3466 52.1362 57.8182C52.1362 58.2926 52.0765 58.6974 51.9572 59.0327C51.8379 59.3665 51.6653 59.6215 51.4395 59.7976C51.2136 59.9723 50.9402 60.0597 50.6191 60.0597ZM50.6191 59.5909C50.9373 59.5909 51.1845 59.4375 51.3606 59.1307C51.5368 58.8239 51.6248 58.3864 51.6248 57.8182C51.6248 57.4403 51.5843 57.1186 51.5034 56.853C51.4238 56.5874 51.3088 56.3849 51.1582 56.2457C51.0091 56.1065 50.8294 56.0369 50.6191 56.0369C50.3038 56.0369 50.0574 56.1925 49.8798 56.5036C49.7022 56.8132 49.6135 57.2514 49.6135 57.8182C49.6135 58.196 49.6532 58.517 49.7328 58.7812C49.8123 59.0455 49.9267 59.2465 50.0758 59.3842C50.2264 59.522 50.4075 59.5909 50.6191 59.5909Z" fill="black"/>
      <path d="M54.3691 60.0597C54.0481 60.0597 53.7747 59.9723 53.5488 59.7976C53.323 59.6215 53.1504 59.3665 53.0311 59.0327C52.9118 58.6974 52.8521 58.2926 52.8521 57.8182C52.8521 57.3466 52.9118 56.9439 53.0311 56.6101C53.1518 56.2749 53.3251 56.0192 53.551 55.843C53.7782 55.6655 54.051 55.5767 54.3691 55.5767C54.6873 55.5767 54.9593 55.6655 55.1852 55.843C55.4125 56.0192 55.5858 56.2749 55.7051 56.6101C55.8258 56.9439 55.8862 57.3466 55.8862 57.8182C55.8862 58.2926 55.8265 58.6974 55.7072 59.0327C55.5879 59.3665 55.4153 59.6215 55.1895 59.7976C54.9636 59.9723 54.6902 60.0597 54.3691 60.0597ZM54.3691 59.5909C54.6873 59.5909 54.9345 59.4375 55.1106 59.1307C55.2868 58.8239 55.3748 58.3864 55.3748 57.8182C55.3748 57.4403 55.3343 57.1186 55.2534 56.853C55.1738 56.5874 55.0588 56.3849 54.9082 56.2457C54.7591 56.1065 54.5794 56.0369 54.3691 56.0369C54.0538 56.0369 53.8074 56.1925 53.6298 56.5036C53.4522 56.8132 53.3635 57.2514 53.3635 57.8182C53.3635 58.196 53.4032 58.517 53.4828 58.7812C53.5623 59.0455 53.6767 59.2465 53.8258 59.3842C53.9764 59.522 54.1575 59.5909 54.3691 59.5909Z" fill="black"/>
      <path d="M45.3494 79.1051V78.6705L47.267 75.6364H47.5824V76.3097H47.3693L45.9205 78.6023V78.6364H48.5028V79.1051H45.3494ZM47.4034 80V75.6364H47.9063V80H47.4034Z" fill="black"/>
      <path d="M50.7246 80.0597C50.4036 80.0597 50.1301 79.9723 49.9043 79.7976C49.6784 79.6214 49.5059 79.3665 49.3865 79.0327C49.2672 78.6974 49.2076 78.2926 49.2076 77.8182C49.2076 77.3466 49.2672 76.9439 49.3865 76.6101C49.5073 76.2749 49.6806 76.0192 49.9064 75.843C50.1337 75.6655 50.4064 75.5767 50.7246 75.5767C51.0428 75.5767 51.3148 75.6655 51.5407 75.843C51.7679 76.0192 51.9412 76.2749 52.0605 76.6101C52.1813 76.9439 52.2417 77.3466 52.2417 77.8182C52.2417 78.2926 52.182 78.6974 52.0627 79.0327C51.9434 79.3665 51.7708 79.6214 51.5449 79.7976C51.3191 79.9723 51.0456 80.0597 50.7246 80.0597ZM50.7246 79.5909C51.0428 79.5909 51.29 79.4375 51.4661 79.1307C51.6422 78.8239 51.7303 78.3864 51.7303 77.8182C51.7303 77.4403 51.6898 77.1186 51.6088 76.853C51.5293 76.5874 51.4142 76.3849 51.2637 76.2457C51.1145 76.1065 50.9348 76.0369 50.7246 76.0369C50.4093 76.0369 50.1628 76.1925 49.9853 76.5036C49.8077 76.8132 49.7189 77.2514 49.7189 77.8182C49.7189 78.196 49.7587 78.517 49.8382 78.7812C49.9178 79.0455 50.0321 79.2465 50.1813 79.3842C50.3319 79.522 50.513 79.5909 50.7246 79.5909Z" fill="black"/>
      <path d="M54.4746 80.0597C54.1536 80.0597 53.8802 79.9723 53.6543 79.7976C53.4284 79.6214 53.2559 79.3665 53.1365 79.0327C53.0172 78.6974 52.9576 78.2926 52.9576 77.8182C52.9576 77.3466 53.0172 76.9439 53.1365 76.6101C53.2573 76.2749 53.4306 76.0192 53.6564 75.843C53.8837 75.6655 54.1564 75.5767 54.4746 75.5767C54.7928 75.5767 55.0648 75.6655 55.2907 75.843C55.5179 76.0192 55.6912 76.2749 55.8105 76.6101C55.9313 76.9439 55.9917 77.3466 55.9917 77.8182C55.9917 78.2926 55.932 78.6974 55.8127 79.0327C55.6934 79.3665 55.5208 79.6214 55.2949 79.7976C55.0691 79.9723 54.7956 80.0597 54.4746 80.0597ZM54.4746 79.5909C54.7928 79.5909 55.04 79.4375 55.2161 79.1307C55.3922 78.8239 55.4803 78.3864 55.4803 77.8182C55.4803 77.4403 55.4398 77.1186 55.3588 76.853C55.2793 76.5874 55.1642 76.3849 55.0137 76.2457C54.8645 76.1065 54.6848 76.0369 54.4746 76.0369C54.1593 76.0369 53.9128 76.1925 53.7353 76.5036C53.5577 76.8132 53.4689 77.2514 53.4689 77.8182C53.4689 78.196 53.5087 78.517 53.5882 78.7812C53.6678 79.0455 53.7821 79.2465 53.9313 79.3842C54.0819 79.522 54.263 79.5909 54.4746 79.5909Z" fill="black"/>
      <path d="M45.4517 100V99.6165L46.892 98.0398C47.0611 97.8551 47.2003 97.6946 47.3097 97.5582C47.419 97.4205 47.5 97.2912 47.5526 97.1705C47.6065 97.0483 47.6335 96.9205 47.6335 96.7869C47.6335 96.6335 47.5966 96.5007 47.5227 96.3885C47.4503 96.2763 47.3509 96.1896 47.2244 96.1286C47.098 96.0675 46.956 96.0369 46.7983 96.0369C46.6307 96.0369 46.4844 96.0717 46.3594 96.1413C46.2358 96.2095 46.1399 96.3054 46.0717 96.429C46.005 96.5526 45.9716 96.6974 45.9716 96.8636H45.4688C45.4688 96.608 45.5277 96.3835 45.6456 96.1903C45.7635 95.9972 45.924 95.8466 46.1271 95.7386C46.3317 95.6307 46.5611 95.5767 46.8153 95.5767C47.071 95.5767 47.2976 95.6307 47.495 95.7386C47.6925 95.8466 47.8473 95.9922 47.9595 96.1754C48.0717 96.3587 48.1278 96.5625 48.1278 96.7869C48.1278 96.9474 48.0987 97.1044 48.0405 97.2578C47.9837 97.4098 47.8842 97.5795 47.7422 97.767C47.6016 97.9531 47.4063 98.1804 47.1563 98.4489L46.1761 99.4972V99.5312H48.2045V100H45.4517Z" fill="black"/>
      <path d="M50.5078 100.06C50.1868 100.06 49.9134 99.9723 49.6875 99.7976C49.4616 99.6214 49.2891 99.3665 49.1697 99.0327C49.0504 98.6974 48.9908 98.2926 48.9908 97.8182C48.9908 97.3466 49.0504 96.9439 49.1697 96.6101C49.2905 96.2749 49.4638 96.0192 49.6896 95.843C49.9169 95.6655 50.1896 95.5767 50.5078 95.5767C50.826 95.5767 51.098 95.6655 51.3239 95.843C51.5511 96.0192 51.7244 96.2749 51.8438 96.6101C51.9645 96.9439 52.0249 97.3466 52.0249 97.8182C52.0249 98.2926 51.9652 98.6974 51.8459 99.0327C51.7266 99.3665 51.554 99.6214 51.3281 99.7976C51.1023 99.9723 50.8288 100.06 50.5078 100.06ZM50.5078 99.5909C50.826 99.5909 51.0732 99.4375 51.2493 99.1307C51.4254 98.8239 51.5135 98.3864 51.5135 97.8182C51.5135 97.4403 51.473 97.1186 51.392 96.853C51.3125 96.5874 51.1974 96.3849 51.0469 96.2457C50.8977 96.1065 50.718 96.0369 50.5078 96.0369C50.1925 96.0369 49.946 96.1925 49.7685 96.5036C49.5909 96.8132 49.5021 97.2514 49.5021 97.8182C49.5021 98.196 49.5419 98.517 49.6214 98.7812C49.701 99.0455 49.8153 99.2464 49.9645 99.3842C50.1151 99.522 50.2962 99.5909 50.5078 99.5909Z" fill="black"/>
      <path d="M54.2578 100.06C53.9368 100.06 53.6634 99.9723 53.4375 99.7976C53.2116 99.6214 53.0391 99.3665 52.9197 99.0327C52.8004 98.6974 52.7408 98.2926 52.7408 97.8182C52.7408 97.3466 52.8004 96.9439 52.9197 96.6101C53.0405 96.2749 53.2138 96.0192 53.4396 95.843C53.6669 95.6655 53.9396 95.5767 54.2578 95.5767C54.576 95.5767 54.848 95.6655 55.0739 95.843C55.3011 96.0192 55.4744 96.2749 55.5938 96.6101C55.7145 96.9439 55.7749 97.3466 55.7749 97.8182C55.7749 98.2926 55.7152 98.6974 55.5959 99.0327C55.4766 99.3665 55.304 99.6214 55.0781 99.7976C54.8523 99.9723 54.5788 100.06 54.2578 100.06ZM54.2578 99.5909C54.576 99.5909 54.8232 99.4375 54.9993 99.1307C55.1754 98.8239 55.2635 98.3864 55.2635 97.8182C55.2635 97.4403 55.223 97.1186 55.142 96.853C55.0625 96.5874 54.9474 96.3849 54.7969 96.2457C54.6477 96.1065 54.468 96.0369 54.2578 96.0369C53.9425 96.0369 53.696 96.1925 53.5185 96.5036C53.3409 96.8132 53.2521 97.2514 53.2521 97.8182C53.2521 98.196 53.2919 98.517 53.3714 98.7812C53.451 99.0455 53.5653 99.2464 53.7145 99.3842C53.8651 99.522 54.0462 99.5909 54.2578 99.5909Z" fill="black"/>
      <path d="M32 20.25H22M32 22.25H22M32 24.25H22M32 26.25H22M32 30.25H22M32 32.25H22M32 34.25H22M32 36.25H22M32 40.25H22M32 42.25H22M32 44.25H22M32 46.25H22M32 50.25H22M32 52.25H22M32 54.25H22M32 56.25H22M32 60.25H22M32 62.25H22M32 64.25H22M32 66.25H22M32 70.25H22M32 72.25H22M32 74.25H22M32 76.25H22M32 80.25H22M32 82.25H22M32 84.25H22M32 86.25H22M32 90.25H22M32 92.25H22M32 94.25H22M32 96.25H22M42 18.25H22M37 28.25H22M42 38.25H22M37 48.25H22M42 58.25H22M37 68.25H22M42 78.25H22M37 88.25H22M42 98.25H22M22.25 18V98" stroke="black" stroke-width="0.5"/>
      </g>
      <g class={overflow() ? "" : "hidden"} transform="translate(4,-1)">
        <path d="M21 1C20.3333 2.9358 19.2586 4.87182 19 6.80762C18.987 6.90494 18.974 7.00228 18.9609 7.09961C18.343 11.6911 17.624 16.2835 17.5 20.875C16.6358 52.8833 15.9232 84.8921 15.1484 116.9C15.0992 118.934 15.0498 120.967 15 123H7C6.95023 120.967 6.90078 118.934 6.85156 116.9C6.07677 84.8921 5.36416 52.8833 4.5 20.875C4.37604 16.2835 3.65699 11.6911 3.03906 7.09961C3.02596 7.00228 3.013 6.90494 3 6.80762C2.74142 4.87182 1.66667 2.9358 1 1H21Z" fill="#78AEDD"/>
        <path d="M71 1C70.6667 2.9358 70.1293 4.87182 70 6.80762C69.9935 6.90495 69.987 7.00228 69.9805 7.09961C69.6715 11.6911 69.312 16.2835 69.25 20.875C68.8179 52.8833 68.4616 84.8921 68.0742 116.9C68.0496 118.934 68.0249 120.967 68 123H64C63.9751 120.967 63.9504 118.934 63.9258 116.9C63.5384 84.8921 63.1821 52.8833 62.75 20.875C62.688 16.2835 62.3285 11.6911 62.0195 7.09961C62.013 7.00228 62.0065 6.90495 62 6.80762C61.8707 4.87182 61.3333 2.9358 61 1H71Z" fill="#78AEDD"/>
        <path d="M80 1C79.8 2.9358 79.478 4.87182 79.4004 6.80762C79.3965 6.90495 79.3926 7.00228 79.3887 7.09961C79.2033 11.6911 78.9874 16.2835 78.9502 20.875C78.6909 52.8833 78.4766 84.8921 78.2441 116.9C78.2294 118.934 78.2151 120.967 78.2002 123H75.7998C75.7849 120.967 75.7706 118.934 75.7559 116.9C75.5234 84.8921 75.3091 52.8833 75.0498 20.875C75.0126 16.2835 74.7967 11.6911 74.6113 7.09961C74.6074 7.00228 74.6035 6.90495 74.5996 6.80762C74.522 4.87182 74.2 2.9358 74 1H80Z" fill="#78AEDD"/>
        <path d="M21 1C20.3333 2.9358 19.2586 4.87182 19 6.80762C18.987 6.90494 18.974 7.00228 18.9609 7.09961C18.343 11.6911 17.624 16.2835 17.5 20.875C16.6358 52.8833 15.9232 84.8921 15.1484 116.9C15.0992 118.934 15.0498 120.967 15 123H7C6.95023 120.967 6.90078 118.934 6.85156 116.9C6.07677 84.8921 5.36416 52.8833 4.5 20.875C4.37604 16.2835 3.65699 11.6911 3.03906 7.09961C3.02596 7.00228 3.013 6.90494 3 6.80762C2.74142 4.87182 1.66667 2.9358 1 1H21Z" stroke="black"/>
        <path d="M71 1C70.6667 2.9358 70.1293 4.87182 70 6.80762C69.9935 6.90495 69.987 7.00228 69.9805 7.09961C69.6715 11.6911 69.312 16.2835 69.25 20.875C68.8179 52.8833 68.4616 84.8921 68.0742 116.9C68.0496 118.934 68.0249 120.967 68 123H64C63.9751 120.967 63.9504 118.934 63.9258 116.9C63.5384 84.8921 63.1821 52.8833 62.75 20.875C62.688 16.2835 62.3285 11.6911 62.0195 7.09961C62.013 7.00228 62.0065 6.90495 62 6.80762C61.8707 4.87182 61.3333 2.9358 61 1H71Z" stroke="black"/>
        <path d="M80 1C79.8 2.9358 79.478 4.87182 79.4004 6.80762C79.3965 6.90495 79.3926 7.00228 79.3887 7.09961C79.2033 11.6911 78.9874 16.2835 78.9502 20.875C78.6909 52.8833 78.4766 84.8921 78.2441 116.9C78.2294 118.934 78.2151 120.967 78.2002 123H75.7998C75.7849 120.967 75.7706 118.934 75.7559 116.9C75.5234 84.8921 75.3091 52.8833 75.0498 20.875C75.0126 16.2835 74.7967 11.6911 74.6113 7.09961C74.6074 7.00228 74.6035 6.90495 74.5996 6.80762C74.522 4.87182 74.2 2.9358 74 1H80Z" stroke="black"/>
      </g>
    </g>
    <Portal mount={document.getElementById("cond-mask")!} isSVG={true}>
      <rect x={0} y={172 - val() / 10} width="20" height={(blocked() === 0) ? val() / 10 : 0} fill="black" />
    </Portal>
    <Portal mount={document.getElementById("conc-mask")!} isSVG={true}>
      <rect x={0} y={172 - val() / 10} width="20" height={(blocked() === 3) ? val() / 10 : 0} fill="black" />
    </Portal>
    <BeakerEmptyModal beakerRef={ref} display={modalDisplay} onDisplayChange={setModalDisplay} onEmptyClick={() => setVal(0)} />
  </>);
};

const BeakerFill: Component<{ vol: Accessor<number> }> = ({ vol }) => {
  return (<>
    <rect id="inBeakerFill" x="5" y={18 + 100 - vol() / 10} width="79" height={vol() / 10} fill="#3B8CCF" fill-opacity="0.6"/>
  </>);
}

const BeakerEmptyModal: Component<{ beakerRef: SVGGElement, display: Accessor<boolean>, onDisplayChange: (x: boolean) => void, onEmptyClick: () => void }> = ({ beakerRef, display, onDisplayChange, onEmptyClick }) => {

  const window_coords = createMemo(() => {
    if (!display() || !beakerRef) return {x:0,y:0};
    const bds = beakerRef.getBoundingClientRect();
    return { x: bds.x + bds.width/2 - 85, y: bds.y + bds.height + 2 };
  })

  // Turn own show off
  let ref!: HTMLDivElement;
  const clickOut = (e: MouseEvent) => {
    if (ref.contains(e.target as Node) ) return;
    document.removeEventListener("click", clickOut);
    onDisplayChange(false);
  }

  createEffect(() => {
    if (display()) {
      document.addEventListener("pointerdown", clickOut);
    }
  });

  return (<>
  <Portal mount={document.querySelector("body")!}>
    {display() && (
      <div ref={ref}
        style={{
          "position": "absolute",
          "left": `${window_coords().x}px`,
          "top": `${window_coords().y}px`,
          "width": "max-content",
          "background": "white",
          "border": "1px solid #ccc",
          "border-radius": "6px",
          "box-shadow": "0 2px 8px rgba(0,0,0,0.15)",
          "padding": "10px",
          "text-align": "center",
          "z-index": 1000,
        }}
      >
        <button
          style={{
            "padding": "4px 12px",
            "border-radius": "4px",
            "border": "1px solid #da3737ff",
            "background": "#da3737ff",
            "color": "white",
            "cursor": "pointer",
          }}
          onClick={onEmptyClick}
        >
          <i class="fa-solid fa-arrows-rotate" />&nbsp;
          empty beaker
        </button>
      </div>
    )}
  </Portal>
  </>);
}